/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var c_weight = 9999 ; var slotsFree = true; var COUNTER = 1500; var SLOTNUM = 0; var pb = true; var indoorFree = true; var TOKENID = 0; var trolleyPos = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingmanagerservice STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("parkingmanagerservice waiting ...")
					}
					 transition(edgeName="t00",targetState="handleEnterRequest",cond=whenRequest("reqenter"))
					transition(edgeName="t01",targetState="enterTheCar",cond=whenRequest("carenter"))
					transition(edgeName="t02",targetState="changeWeight",cond=whenDispatch("cW"))
					transition(edgeName="t03",targetState="changeSlots",cond=whenDispatch("cS"))
				}	 
				state("changeWeight") { //this:State
					action { //it:State
						if(  indoorFree  
						 ){indoorFree = false 
						}
						else
						 {indoorFree = true 
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("changeSlots") { //this:State
					action { //it:State
						if(  slotsFree  
						 ){slotsFree = false 
						}
						else
						 {slotsFree = true 
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleEnterRequest") { //this:State
					action { //it:State
						println("parkingmanagerservice handles reqenter")
						if(  slotsFree  
						 ){answer("reqenter", "enter", "enter(6)"   )  
						updateResourceRep( "enter(6)"  
						)
						println("parkingmanagerservice slot 6 free")
						}
						else
						 {answer("reqenter", "enter", "enter(0)"   )  
						 updateResourceRep( "enter(0)"  
						 )
						 println("parkingmanagerservice no slots free")
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ trolleyPos != 0   
					}) )
					transition( edgeName="goto",targetState="moveTrolleyHome", cond=doswitchGuarded({! ( trolleyPos != 0   
					) }) )
				}	 
				state("moveTrolleyHome") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move at home")
						request("backToHome", "backToHome(go)" ,"trolley" )  
					}
					 transition(edgeName="t04",targetState="checkMove",cond=whenReply("movedToHome"))
				}	 
				state("checkMove") { //this:State
					action { //it:State
						
									var m = ""  
						println("parkingmanagerservice check move")
						if( checkMsgContent( Term.createTerm("movedToHome(RESULT)"), Term.createTerm("movedToHome(Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false 
													trolleyPos = 0
								}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("trolleyProblem") { //this:State
					action { //it:State
						println("parkingmanagerservice: problem with the trolley. maintenance required")
					}
				}	 
				state("enterTheCar") { //this:State
					action { //it:State
						println("parkingmanagerservice reply to enterthecar ")
						if(  indoorFree  
						 ){if( checkMsgContent( Term.createTerm("carenter(SLOT)"), Term.createTerm("carenter(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0 ).toInt()   
								 TOKENID = COUNTER - 6   
								updateResourceRep( "car(CP1494)"  
								)
								answer("carenter", "receipt", "receipt(CP1494)"   )  
						}
						}
						else
						 {answer("carenter", "receipt", "receipt(wait)"   )  
						 updateResourceRep( "car(wait)"  
						 )
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ !indoorFree  
					}) )
					transition( edgeName="goto",targetState="requestMove", cond=doswitchGuarded({! ( !indoorFree  
					) }) )
				}	 
				state("requestMove") { //this:State
					action { //it:State
						println("parkingmanagerservice request moveToIn ")
						request("moveToIn", "moveToIn(go)" ,"trolley" )  
					}
					 transition(edgeName="t05",targetState="checkMovedToIn",cond=whenReply("movedToIn"))
				}	 
				state("checkMovedToIn") { //this:State
					action { //it:State
						 pb = true
									var m= ""  
						if( checkMsgContent( Term.createTerm("movedToIn(MOVED)"), Term.createTerm("movedToIn(SUCCESS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false
													trolleyPos = 1
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyToSlotIn", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("moveTrolleyToSlotIn") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move to slot in")
						request("moveToSlotIn", "moveToSlotIn(3,2)" ,"trolley" )  
					}
					 transition(edgeName="t06",targetState="checkMovedToSlotIn",cond=whenReply("movedToSlotIn"))
				}	 
				state("checkMovedToSlotIn") { //this:State
					action { //it:State
						 var pb = true
									var m = ""  
						if( checkMsgContent( Term.createTerm("movedToSlotIn(RESULT,X,Y)"), Term.createTerm("movedToIn(SUCCESS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyHome", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
			}
		}
}
