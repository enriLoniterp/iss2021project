/* Generated by AN DISI Unibo */ 
package park_manager_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.Json
import resources.ParkingState
import resources.ParkingStateToSend

class Park_manager_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkmanagerservice STARTS")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("parkmanagerservice waiting ...")
					}
					 transition(edgeName="t026",targetState="changeT",cond=whenRequest("changeTrolley"))
					transition(edgeName="t027",targetState="monitor",cond=whenRequest("getParkingState"))
				}	 
				state("changeT") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("changeTrolley(S)"), Term.createTerm("changeTrolley(COMMAND)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val COMMAND = payloadArg(0) 
											   lateinit var RESPONSE : String
											
												when(COMMAND){
													"stop" -> { 
															RESPONSE = Json.encodeToString("Success")	
								forward("stop", "stop(X)" ,"trolley_controller" ) 
								println("parkmanagerservice $COMMAND the trolley")
								updateResourceRep( "parkmanagerservice $COMMAND the trolley"  
								)
								}
														"resume" -> {	
														RESPONSE = Json.encodeToString("Success")
														
								forward("resume", "resume(X)" ,"trolley_controller" ) 
								println("parkmanagerservice $COMMAND the trolley")
								updateResourceRep( "managerservice $COMMAND the trolley" 
								)
								}		
													
												
												} 
								answer("changeTrolley", "responseChangeTrolley", "$RESPONSE"   )  
						}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("monitor") { //this:State
					action { //it:State
						println("parkmanagerservice reply to state request")
						
									var park = ParkingStateToSend(ParkingState.trolleyState, ParkingState.fanState, ParkingState.temperature, ParkingState.slotState)
									val RESPONSE = Json.encodeToString(park)
						answer("getParkingState", "responseParkingState", "responseParkingState($RESPONSE)"   )  
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
