System carparking

Dispatch moveToIn : moveToIn(MOVETOIN)
Dispatch movedToIn : movedToIn(MOVED)

Dispatch moveToSlot : moveToSlot(X)
Dispatch movedToSlot : movedToSlot(SUCCESS,X,Y)

Dispatch moveToHome : moveToHome(X) 
Dispatch movedToHome : movedToHome(Y)

Dispatch moveToOut : moveToOut(X,Y)
Dispatch movedToOut : movedToOut(SUCCESS)

Dispatch stop : stop(STOP)
Dispatch resume : resume(RESUME)

Dispatch goToIdle : goToIdle(X)

Context ctxcarparking ip[host="localhost" port=8002]



QActor trolley_controller context  ctxcarparking{
	[#
		var currentTask : String = "NONE"
		lateinit var mv : String
		var ttAd = main.ActuatorFactory().getActuatorAdapter(main.ActuatorType.TROLLEY)
		val HOME : Pair<String,String> = Pair("0", "0")
		val INDOOR : Pair<String,String> = Pair("6", "0")
		val OUTDOOR : Pair<String,String> = Pair("6", "4")
		val SLOT1 : Pair<String,String> = Pair("2", "1")
		val SLOT2 : Pair<String,String> = Pair("2", "2")
		val SLOT3 : Pair<String,String> = Pair("2", "3")
		val SLOT4 : Pair<String,String> = Pair("3", "1")
		val SLOT5 : Pair<String,String> = Pair("3", "2")
		val SLOT6 : Pair<String,String> = Pair("3", "3")
		
	#]
		
	State s0 initial{
		println("TrolleyController STARTS")
		run itunibo.planner.plannerUtil.loadRoomMapFromTxt("parkingMap.txt") 
		run itunibo.planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()
	}
	Goto idle
				  
	State idle{
		[# currentTask = "IDLE" #]
		updateResource [# "trolley IDLE" #]
		println("transportTrolleyController idle")
	}
	Transition t0 whenMsg moveToIn -> working
				  whenMsg moveToOut -> working
				  whenMsg moveToSlot -> working
				  whenMsg moveToHome -> working
				  whenMsg stop -> stopped 
	
	
	State working{
		printCurrentMessage
		println("trolley WORKING")
		updateResource [# "WORKING" #]
		
		//Move the trolley to the INDOOR area
		onMsg(moveToIn : moveToIn(WHERE)) {
				println("trolley trip to INDOOR start")
				[# 
					itunibo.planner.plannerUtil.planForGoal(INDOOR.first,INDOOR.second) 
					currentTask = "INDOOR"
			
					var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
					while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()	
				}#]
				println("trolley trip to INDOOR end")
		}
		//Move the trolley to the OUTDOOR area
		onMsg(moveToOut : moveToOut(WHERE)) {
				
				println("trolley trip to OUTDOOR start")
				[# 
					itunibo.planner.plannerUtil.planForGoal(OUTDOOR.first,OUTDOOR.second) 
					currentTask = "OUTDOOR"
			
					var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
					while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()	
				}#]
				println("trolley trip to OUTDOOR end")
				forward trolley_controller -m moveToHome : moveToHome(X)
		}
		//Move the trolley to the specific parking slot
		onMsg(moveToSlot : moveToSlot(SLOTNUM)) {
			[# 
				var SLOTNUM = payloadArg(0).toInt()
				if( currentTask.equals("INDOOR"))
					currentTask = "PARKIN"
				else
					currentTask = "PARKOUT"
			#]
			println("trolley trip to slot $SLOTNUM start")
			updateResource [# "trolley moveToSlot($SLOTNUM)" #]
			
			[#
				when(SLOTNUM){
					1 -> itunibo.planner.plannerUtil.planForGoal(SLOT1.first, SLOT1.second)
					2 -> itunibo.planner.plannerUtil.planForGoal(SLOT2.first, SLOT2.second)
					3 -> itunibo.planner.plannerUtil.planForGoal(SLOT3.first, SLOT3.second)
					4 -> itunibo.planner.plannerUtil.planForGoal(SLOT4.first, SLOT4.second)
					5 -> itunibo.planner.plannerUtil.planForGoal(SLOT5.first, SLOT5.second)
					6 -> itunibo.planner.plannerUtil.planForGoal(SLOT6.first, SLOT6.second)
				}
				
				var mv = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
						ttAd.sendCommand(mv)						
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()		
				}#]
			
		 	updateResource [# "trolley trip to slot $SLOTNUM end" #] 
			println("trolley trip to slot $SLOTNUM end")
			println("trolley $currentTask")
			if [# currentTask.equals("PARKIN") #]{
				forward trolley_controller -m moveToHome : moveToHome(X)
			}
		}
		
		
		//Move the trolley to the HOME position
		onMsg(moveToHome : moveToHome(HOME)) {
				[#
				currentTask = "HOME"
				itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
				var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						itunibo.planner.plannerUtil.updateMap(mv)
						mv = itunibo.planner.plannerUtil.getNextPlannedMove()
				}#]
				println("trolley at HOME")
		updateResource [# "trolley at HOME" #] 
		forward trolley -m goToIdle : goToIdle(X)
		} 
	}
	Transition t1  
			whenMsg stop -> stopped
	     	whenMsg moveToHome -> working
			whenMsg moveToIn -> working
			whenMsg moveToOut -> working
		 	whenMsg moveToSlotIn -> working
			whenMsg moveToSlotOut -> working
			whenMsg goToIdle -> idle
		
	
	
	State stopped{
		println("transportTrolleyController stopped")
	}
	Transition t2
		whenMsg resume and [# currentTask == "HOME" || currentTask == "IDLE" #]-> idle
		whenMsg resume and [# currentTask == "PARKIN" || currentTask == "PARKOUT" || currentTask == "OUTDOOR" || currentTask == "INDOOR"#] -> working
}

QActor trolley context  ctxcarparking{
	State s0 initial{
		println("trolley STARTS")
	}	
}


QActor fan context  ctxcarparking{
	[#var state : String = "OFF"
		#
	]
	State s0 initial{
		println("FAN STARTS")
	}
	Goto off
	
	State off{
		println("FAN OFF")
		//updateResource [# "OFF" #] 
	}
	Transition t1
		whenMsg command -> checkCommand
		
	State checkCommand{
		onMsg(command : command(X)){
			[#
				if (payloadArg(0)=="ON"){
					state = "ON"
					#]
					
					//replyTo command with executed : executed(ON)
					[# 
				}else{
					state = "OFF" 
				#]
					
					//replyTo command with executed : executed(OFF)
				[#
				}
				#]
				
		}
	}
	Goto off if [#state == "OFF"#] else on
	

	State on{
		println("FAN ON")
		updateResource [# "ON" #]
	}
	Transition t1
		whenMsg command -> checkCommand

		
}




/* ======================================================================== */

 