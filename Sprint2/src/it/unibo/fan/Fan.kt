/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var state : String = "OFF"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("FAN STARTS")
					}
					 transition( edgeName="goto",targetState="off", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						println("FAN OFF")
					}
					 transition(edgeName="t114",targetState="checkCommand",cond=whenDispatch("command"))
				}	 
				state("checkCommand") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("command(X)"), Term.createTerm("command(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												if (payloadArg(0)=="ON"){
													state = "ON"
								 
												}else{
													state = "OFF" 
								
												}
						}
					}
					 transition( edgeName="goto",targetState="off", cond=doswitchGuarded({state == "OFF" 
					}) )
					transition( edgeName="goto",targetState="on", cond=doswitchGuarded({! (state == "OFF" 
					) }) )
				}	 
				state("on") { //this:State
					action { //it:State
						println("FAN ON")
						updateResourceRep( "ON"  
						)
					}
					 transition(edgeName="t115",targetState="checkCommand",cond=whenDispatch("command"))
				}	 
			}
		}
}
