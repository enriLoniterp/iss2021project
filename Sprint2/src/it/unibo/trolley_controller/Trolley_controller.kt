/* Generated by AN DISI Unibo */ 
package it.unibo.trolley_controller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import resources.ActuatorPort
	
class Trolley_controller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var currentTask : String = "NONE"
				lateinit var mv : String
				var x = 0
				var y = 0
				lateinit var ttAd : ActuatorPort
				val HOME : Pair<String,String> = Pair("0", "0")
				val INDOOR : Pair<String,String> = Pair("5", "0")
				val OUTDOOR : Pair<String,String> = Pair("5", "4")
				val SLOT1 : Pair<String,String> = Pair("1", "1")
				val SLOT2 : Pair<String,String> = Pair("1", "2")
				val SLOT3 : Pair<String,String> = Pair("1", "3")
				val SLOT4 : Pair<String,String> = Pair("4", "1")
				val SLOT5 : Pair<String,String> = Pair("4", "2")
				val SLOT6 : Pair<String,String> = Pair("4", "3")
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						ttAd = resources.ActuatorFactory().getActuatorAdapter(resources.ActuatorType.TROLLEY) 
						println("trolleyController STARTS")
						itunibo.planner.plannerUtil.loadRoomMapFromTxt( "parkingMap.txt"  )
						itunibo.planner.plannerUtil.initAI(  )
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.startTimer(  )
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 currentTask = "INDOOR"  
						updateResourceRep( "trolley IDLE"  
						)
						println("trolleyController idle")
					}
					 transition(edgeName="t00",targetState="working",cond=whenDispatch("moveToIn"))
					transition(edgeName="t01",targetState="working",cond=whenDispatch("moveToOut"))
					transition(edgeName="t02",targetState="working",cond=whenDispatch("moveToSlot"))
					transition(edgeName="t03",targetState="working",cond=whenDispatch("moveToHome"))
					transition(edgeName="t04",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("trolley WORKING")
						updateResourceRep( "WORKING"  
						)
						if( checkMsgContent( Term.createTerm("moveToIn(MOVETOIN)"), Term.createTerm("moveToIn(WHERE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("trolley trip to INDOOR start")
								 
													itunibo.planner.plannerUtil.planForGoal(INDOOR.first,INDOOR.second) 
													currentTask = "INDOOR"
											
													var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
													while(! mv.equals("")){
														ttAd.sendCommand(mv) 
														delay(1500)
														itunibo.planner.plannerUtil.updateMap(mv)
														mv = itunibo.planner.plannerUtil.getNextPlannedMove()	
												} 
								println("trolley trip to INDOOR end")
								updateResourceRep( "(5,0)"  
								)
						}
						if( checkMsgContent( Term.createTerm("moveToOut(X)"), Term.createTerm("moveToOut(WHERE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("trolley trip to OUTDOOR start")
								 
													itunibo.planner.plannerUtil.planForGoal(OUTDOOR.first,OUTDOOR.second) 
													currentTask = "OUTDOOR"
											
													var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
													while(! mv.equals("")){
														ttAd.sendCommand(mv) 
														delay(1500)
														itunibo.planner.plannerUtil.updateMap(mv)
														mv = itunibo.planner.plannerUtil.getNextPlannedMove()	
												} 
								println("trolley trip to OUTDOOR end")
								updateResourceRep( "(5,4)"  
								)
								forward("moveToHome", "moveToHome(X)" ,"trolley_controller" ) 
						}
						if( checkMsgContent( Term.createTerm("moveToSlot(X)"), Term.createTerm("moveToSlot(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var SLOTNUM = payloadArg(0).toInt()
												if( currentTask.equals("INDOOR"))
													currentTask = "PARKIN"
												else
													currentTask = "PARKOUT"
								println("trolley trip to slot $SLOTNUM start")
								
												when(SLOTNUM){
													1 -> {itunibo.planner.plannerUtil.planForGoal(SLOT1.first, SLOT1.second);x=1;y=1}
													2 -> {itunibo.planner.plannerUtil.planForGoal(SLOT2.first, SLOT2.second);x=1;y=2}
													3 -> {itunibo.planner.plannerUtil.planForGoal(SLOT3.first, SLOT3.second);x=1;y=3}
													4 -> {itunibo.planner.plannerUtil.planForGoal(SLOT4.first, SLOT4.second);x=4;y=1}
													5 -> {itunibo.planner.plannerUtil.planForGoal(SLOT5.first, SLOT5.second);x=4;y=2}
													6 -> {itunibo.planner.plannerUtil.planForGoal(SLOT6.first, SLOT6.second);x=4;y=3}
												}
												
												var mv = itunibo.planner.plannerUtil.getNextPlannedMove()
												while(! mv.equals("")){
														ttAd.sendCommand(mv)
														delay(1500)						
														itunibo.planner.plannerUtil.updateMap(mv)
														mv = itunibo.planner.plannerUtil.getNextPlannedMove()		
												} 
								updateResourceRep( "("+x+","+y+")"  
								)
								println("trolley trip to slot $SLOTNUM end")
								println("trolley $currentTask")
								if(  currentTask.equals("PARKIN")  
								 ){forward("moveToHome", "moveToHome(X)" ,"trolley_controller" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("moveToHome(X)"), Term.createTerm("moveToHome(HOME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												currentTask = "HOME"
												itunibo.planner.plannerUtil.planForGoal(HOME.first, HOME.second)
												var mv : String = itunibo.planner.plannerUtil.getNextPlannedMove()
												while(! mv.equals("")){
														ttAd.sendCommand(mv) 
														delay(1500)
														itunibo.planner.plannerUtil.updateMap(mv)
														mv = itunibo.planner.plannerUtil.getNextPlannedMove()
												} 
								println("trolley in HOME")
								updateResourceRep( "(0,0)"  
								)
						}
					}
					 transition(edgeName="t15",targetState="blocked",cond=whenDispatch("error"))
					transition(edgeName="t16",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t17",targetState="working",cond=whenDispatch("moveToHome"))
					transition(edgeName="t18",targetState="working",cond=whenDispatch("moveToIn"))
					transition(edgeName="t19",targetState="working",cond=whenDispatch("moveToOut"))
					transition(edgeName="t110",targetState="working",cond=whenDispatch("moveToSlot"))
					transition(edgeName="t111",targetState="idle",cond=whenDispatch("goToIdle"))
				}	 
				state("blocked") { //this:State
					action { //it:State
						println("trolleyController blocked")
					}
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("trolleyController stopped")
					}
					 transition(edgeName="t212",targetState="idle",cond=whenDispatchGuarded("resume",{ currentTask == "HOME" || currentTask == "IDLE"  
					}))
					transition(edgeName="t213",targetState="working",cond=whenDispatchGuarded("resume",{ currentTask == "PARKIN" || currentTask == "PARKOUT" || currentTask == "OUTDOOR" || currentTask == "INDOOR" 
					}))
				}	 
			}
		}
}
