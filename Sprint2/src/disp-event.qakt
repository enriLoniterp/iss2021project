System carparking

Dispatch moveToIn : moveToIn(move)
Event movedToIn: movedToIn(X,Y)

Dispatch moveToSlot : moveToSlot(X)
Event movedToSlot : movedToSlot(X,Y)

Dispatch moveToOut : moveToOut(move)
Event movedToOut: movedToOut(X,Y)

Dispatch moveToHome : moveToHome(move)
Event movedToHome: movedToHome(X,Y)


Context ctxcarparking ip[host="localhost" port=8002]


QActor transport_trolley context ctxcarparking{
	[#	
		var cordX = 0
		var cordY = 0
	#]
	State s0 initial{
		println("transport_trolley STARTS")	
	}
	Goto idle
	
	State idle{
		println("transport_trolley idle")
	}
	Transition t0 whenMsg moveToIn -> working
		      whenMsg moveToOut -> working
 		      whenMsg moveToSlot -> working
		      whenMsg moveToHome -> working
	
	State working{

		onMsg(moveToIn : moveToIn(move)) {
			//TODO moves sequence
			emit movedToIn : movedToIn(5,0)
		}

		onMsg(moveToOut : moveToOut(move)) {
			//TODO moves sequence
			emit movedToOut : movedToOut(5,4)
		}

		onMsg(moveToSlot : moveToSlot(X)) {
			[#
				var SLOTNUM = payloadArg(0).toInt()				
				when(SLOTNUM){
				1->{cordX=1;cordY=1}
				2->{cordX=1;cordY=2}
				3->{cordX=1;cordY=3}
				4->{cordX=4;cordY=1}
				5->{cordX=4;cordY=2}
				6->{cordX=4;cordY=3}
				}
			#]
			//TODO moves sequence
			emit movedToSlot : movedToSlot(cordX,cordY)
		}
		
		
		onMsg(moveToHome : moveToHome(move)) {
			//TODO moves sequence
			emit movedToHome : movedToHome(0,0)
		}
		
		
	}
	Goto idle
	
		
}


QActor caller context ctxcarparking{
	State s0 initial{
		println("caller STARTS")	
	}
	Goto working
	
	State working{
		println("caller send moveToIn")
		forward transport_trolley -m moveToIn : moveToIn(move) 
	}
	Transition t0 whenEvent movedToIn -> checkPosition

	State checkPosition{
		onMsg(movedToIn : movedToIn(X,Y)) {
		[#
			var x = payloadArg(0).toInt()	
			var y = payloadArg(1).toInt()
			if(x==5 && y==0){
				println("moved correctly")
			}else{
				println("moved uncorrectly!")
			}
		#]
	}

}

}
