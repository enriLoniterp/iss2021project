/* Generated by AN DISI Unibo */ 
package park_service_gui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Park_service_gui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var type = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkservicegui STARTS")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("parkservicegui idle")
					}
					 transition(edgeName="t011",targetState="working",cond=whenDispatch("command"))
					transition(edgeName="t012",targetState="processMessage",cond=whenDispatch("alert"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("parkservicegui execute command")
						if( checkMsgContent( Term.createTerm("command(X)"), Term.createTerm("command(C)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
											type = payloadArg(0).toInt()
											when(type){
												1-> 
								request("acceptIn", "acceptIn(name)" ,"park_client_service" )  
								
												2-> 
								request("acceptOut", "acceptOut(name)" ,"park_client_service" )  
								
												3-> 
								request("carenter", "carenter(SLOTNUM)" ,"park_client_service" )  
								
												}
						}
					}
					 transition(edgeName="t013",targetState="processMessage",cond=whenReply("responseAcceptIn"))
					transition(edgeName="t014",targetState="processMessage",cond=whenReply("responseAcceptOut"))
					transition(edgeName="t015",targetState="processMessage",cond=whenReply("responseCarenter"))
				}	 
				state("processMessage") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
