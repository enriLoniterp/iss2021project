/* Generated by AN DISI Unibo */ 
package it.unibo.park_client_service

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import java.util.*
import kotlin.concurrent.schedule
	
class Park_client_service ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val weightSensorAdapter = weightsensor.WeightSensorAdapter()
		        val outSonarAdapter = outsonar.OutSonarAdapter()
				lateinit var currentJob : String
				lateinit var ps : resources.ParkingState
				var SLOTNUM = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkClientService STARTS")
						  
									try{
									val fs = java.io.ObjectInputStream(java.io.FileInputStream("ParkingState.bin"))  
									ps = fs.readObject() as resources.ParkingState
									}catch(e : Exception){
									   ps = resources.ParkingState("idle", 20, true, true, HashMap<Int,String>())
									}
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("parkClientService waiting ...")
					}
					 transition(edgeName="t00",targetState="error",cond=whenDispatch("trolleyError"))
					transition(edgeName="t01",targetState="working",cond=whenRequest("acceptIn"))
					transition(edgeName="t02",targetState="working",cond=whenRequest("acceptOut"))
					transition(edgeName="t03",targetState="working",cond=whenRequest("carenter"))
				}	 
				state("error") { //this:State
					action { //it:State
						println("ERORR!")
					}
				}	 
				state("working") { //this:State
					action { //it:State
						 
						            		lateinit var response : String
											SLOTNUM = 0
											var TOKENID= "0"
						if( checkMsgContent( Term.createTerm("acceptIn(req)"), Term.createTerm("acceptIn(req)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(  ps.indoorFree && ps.trolleyState != ("trolley STOPPED")  
								 ){
								                		for(i in 1..6) {
								                    			if(ps.slotState.get(i).equals("")) {
								                        			SLOTNUM = i
								                        			break
								                    			}
								                		}
								if(  SLOTNUM == 0  
								 ){ response = "PARKING FULL"  
								}
								else
								 { response = "$SLOTNUM" 
								 					ps.slotState.put(SLOTNUM, "R")  
								 }
								}
								else
								 { response = "The indoor area is engaged or the trolley is stopped"  
								 }
								println("clientservice reply enter($SLOTNUM)")
								updateResourceRep( "$SLOTNUM"  
								)
								answer("acceptIn", "responseAcceptIn", "responseAcceptIn(response)"   )  
						}
						if( checkMsgContent( Term.createTerm("acceptOut(req)"), Term.createTerm("acceptOut(req)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TOKENID = payloadArg(0)  
								if(  ps.outdoorFree && ps.trolleyState != ("trolley STOPPED")  
								 ){ 
														ps.slotState.forEach { (k, v) -> 
															if(v == TOKENID)
																SLOTNUM = k
														}
								if(  SLOTNUM != 0  
								 ){ val response ="Success"  
								answer("acceptOut", "responseAcceptOut", "responseAcceptOut(response)"   )  
								request("moveToSlot", "moveToSlot($SLOTNUM)" ,"trolley_controller" )  
								currentJob = "parkOut" 
								println("clientservice moves the car from SLOTNUM = $SLOTNUM")
								updateResourceRep( "clientservice moves the car from SLOTNUM = $SLOTNUM"  
								)
								 ps.slotState.put(SLOTNUM, "")  
								
															val os = java.io.ObjectOutputStream( java.io.FileOutputStream("ParkingState.bin") )
															os.writeObject(ps)
															os.flush()
															os.close()
								}
								else
								 { val response = "Invalid tokenid"  
								 answer("acceptOut", "responseAcceptOut", "responseAcceptOut(response)"   )  
								 }
								}
								else
								 { val response = "The trolley is stopped"  
								 answer("acceptOut", "responseAcceptOut", "responseAcceptOut(response)"   )  
								 }
								println("clientservice reply")
								updateResourceRep( "clientservice reply"  
								)
						}
						if( checkMsgContent( Term.createTerm("carenter(SN)"), Term.createTerm("carenter(SN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = payloadArg(0).toInt()  
								if(  SLOTNUM in 1..6 && ps.slotState.get(SLOTNUM).equals("R")  
								 ){if(  !ps.indoorFree  
								 ){
														val sdf = java.text.SimpleDateFormat("dd/MM/yyyy-hh:mm:ss")
														val currentDate = sdf.format(java.util.Date())	
														val TOKENID = "$currentDate-$SLOTNUM"
								 val response = "$TOKENID"  
								answer("carenter", "responseCarenter", "responseCarenter(response)"   )  
								request("moveToIn", "moveToIn(move)" ,"trolley_controller" )  
								println("clientservice moves the car to SLOTNUM = $SLOTNUM")
								updateResourceRep( "parkingclientservice moves the car to SLOTNUM = $SLOTNUM"  
								)
								 ps.slotState.put(SLOTNUM, "$TOKENID")  
								
														val os = java.io.ObjectOutputStream( java.io.FileOutputStream("ParkingState.bin") )
														os.writeObject(ps)
														os.flush()
														os.close()
								}
								else
								 { val response = "The indoor area is free"  
								 answer("carenter", "responseCarenter", "responseCarenter(response)"   )  
								 }
								}
								else
								 { val response = "Invalid parking slot number"  
								 answer("carenter", "responseCarenter", "responseCarenter(response)"   )  
								 }
								println("clientservice reply")
								updateResourceRep( "clientservice reply"  
								)
						}
					}
					 transition(edgeName="t04",targetState="error",cond=whenDispatch("trolleyError"))
					transition(edgeName="t05",targetState="processReply",cond=whenReply("movedToSlot"))
					transition(edgeName="t06",targetState="processReply",cond=whenReply("movedToIn"))
				}	 
				state("error") { //this:State
					action { //it:State
						println("Error in transportTrolley! Technical intervention required")
					}
					 transition(edgeName="t07",targetState="idle",cond=whenDispatch("restart"))
				}	 
				state("processReply") { //this:State
					action { //it:State
						println("process message")
						if( checkMsgContent( Term.createTerm("movedToSlot(SUCCESS,X,Y)"), Term.createTerm("movedToSlot(done)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if(currentJob == "parkOut"){
								request("moveToOut", "moveToOut(move)" ,"trolley_controller" )  
								}else{ 
								forward("goToIdle", "goToIdle(go)" ,"park_client_service" ) 
								}
						}
						if( checkMsgContent( Term.createTerm("movedToIn(MOVED)"), Term.createTerm("movedToIn(done)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								request("moveToSlot", "moveToSlot($SLOTNUM)" ,"trolley_controller" )  
								currentJob = "parkIn" 
						}
						if( checkMsgContent( Term.createTerm("movedToOut(SUCCESS)"), Term.createTerm("movedToOut(done)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("goToIdle", "goToIdle(go)" ,"park_client_service" ) 
								var t = Timer("SettingUp", false)
												t.schedule(500) { 
								   						kotlinx.coroutines.GlobalScope.launch{
								            			//it.unibo.webspring.demo.BaseController.
								            				println("P")}
													}
											
												
											
								    			outSonarAdapter.setTimer(t)
								    			
						}
					}
					 transition(edgeName="t08",targetState="idle",cond=whenDispatch("goToIdle"))
					transition(edgeName="t09",targetState="processReply",cond=whenReply("movedToOut"))
					transition(edgeName="t010",targetState="processReply",cond=whenReply("movedToSlot"))
				}	 
			}
		}
}
