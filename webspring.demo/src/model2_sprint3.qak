System carparking

//parkingmanagerservice-trolleycontroller interaction
Request moveToIn : moveToIn(MOVETOIN)
Reply movedToIn : movedToIn(MOVED)

Request moveToSlot : moveToSlot(X)
Reply movedToSlot : movedToSlot(SUCCESS)

Dispatch moveToHome : moveToHome(X) 
Dispatch movedToHome : movedToHome(Y)

Request moveToOut : moveToOut(X)
Reply movedToOut : movedToOut(SUCCESS)

Dispatch stop : stop(STOP)
Dispatch resume : resume(RESUME)

Dispatch trolleyError : trolleyError(X)
Dispatch error : error(ERROR)

Dispatch goToIdle : goToIdle(X)
Dispatch stop	 : stop(X)
Dispatch resume : resume(X)	
Dispatch cmd       : cmd(MOVE)    
Request step       : step( TIME )	

Dispatch command       : command( X )
//Reply executed : executed(STATE)

//gui-clientservice interaction
Request acceptIn : acceptIn(req)
Reply responseAcceptIn: responseAcceptIn(X)

Request carenter : carenter(SN)
Reply responseCarenter : responseCarenter(X)

Request acceptOut : acceptOut(TI)
Reply responseAcceptOut: responseAcceptOut(X)

Dispatch pick_up_available : pick_up_available(av)

Dispatch command : command(C) //command received from client user interface

Dispatch car_ready : car_ready(X) //information about car in outdoor area from sonar or trolleyController

Dispatch alert : alert(X)

Dispatch restart : restart(r)

Dispatch goToIdle : goToIdle(X)


Context ctxcarparking ip[host="localhost" port=8002]


QActor park_client_service context ctxcarparking{
	[#
		val weightSensorAdapter = weightsensor.WeightSensorAdapter()
        val outSonarAdapter = outsonar.OutSonarAdapter()
		lateinit var currentJob : String
		
		var RESPONSE  = ""
		var SLOTNUM = 0
	#]
	State s0 initial{
		println("parkClientService STARTS")
		
		//retrieve parking state or create a new one
		[#  
			try{
			loadObject("ParkingState.json", ParkingState)
			println(ParkingState.slotState.toString())
			}catch(e : Exception){
			   var slots: HashMap<Int,String> = HashMap()
			   for(i in 1..6){
			   	slots.put(i, "")
			   }
			   ParkingState.slotState = slots
			}
			
		#]
	}
	Goto idle
	
	State idle{
		println("parkClientService waiting ...")
	}
	Transition t0 	whenMsg trolleyError -> error
				whenRequest acceptIn -> working
		      	whenRequest acceptOut -> working
 		     	whenRequest carenter -> working
	
	State working{
		[# 
            	    RESPONSE = ""
					SLOTNUM = 0
					var TOKENID= "0"
		#]
		println("WORKING")
		printCurrentMessage
		onMsg(acceptIn : acceptIn(req)) {
			//check for slot free and trolley working
			if [# ParkingState.indoorFree && ParkingState.trolleyState != ("trolley STOPPED") #] 
			{             			
            			[#
                		for(i in 1..6) {
                    			if(ParkingState.slotState.get(i).equals("")) {
                        			SLOTNUM = i
                        			break
                    			}
                		}
	            		#]

            			if [# SLOTNUM == 0 #] {
	                		
					[# RESPONSE = "0" #]
       		        	}else{
					[# RESPONSE = "$SLOTNUM" 
					ParkingState.slotState.put(SLOTNUM, "R") #]
				}
				
        		}
        		else {
            			
	                	[# RESPONSE= "The indoor area is engaged or the trolley is stopped" #]
        		}

        		println("clientservice reply enter($SLOTNUM)")
        		updateResource [# "$SLOTNUM" #]
				replyTo acceptIn with responseAcceptIn : responseAcceptIn($SLOTNUM)
				forward park_client_service -m goToIdle : goToIdle(go)
		}

		onMsg(acceptOut : acceptOut(TI)) {
			[# TOKENID = payloadArg(0) #]			
			//check for outdoor free and trolley working
			if [# ParkingState.outdoorFree && ParkingState.trolleyState != ("trolley STOPPED") #]{ 
				
					//retrieve slot from TOKENID
					[# 
						ParkingState.slotState.forEach { (k, v) -> 
							if(v == TOKENID)
								SLOTNUM = k
						}
					#]
					
					if [# SLOTNUM != 0 #] {
						
						[# RESPONSE ="Success" #]
						replyTo acceptOut with responseAcceptOut : responseAcceptOut($RESPONSE)
						
						request trolley_controller -m moveToSlot : moveToSlot($SLOTNUM) //trolleyController
						[#currentJob = "parkOut"#]
						println("clientservice moves the car from SLOTNUM = $SLOTNUM to out")
						updateResource [# "clientservice moves the car from SLOTNUM = $SLOTNUM" #]
						
						
						
						[#ParkingState.slotState.put(SLOTNUM, "") #]	
						
						//Save state to file
						[#
							saveObject("ParkingState.json", ParkingState)
						#]
					}
					else {
						[# RESPONSE = "Invalid tokenid" #]
						replyTo acceptOut with responseAcceptOut : responseAcceptOut($RESPONSE)
					}					
				}
				else{
					[# RESPONSE = "The trolley is stopped" #]
					replyTo acceptOut with responseAcceptOut : responseAcceptOut($RESPONSE)
				}
				
			println("clientservice reply")
	        	updateResource [# "clientservice reply" #]
		}

		onMsg(carenter : carenter(SN)) {
			[# SLOTNUM = payloadArg(0).toInt() #]
			
			if [# SLOTNUM in 1..6 && ParkingState.slotState.get(SLOTNUM).equals("R") #] { 
				if [# !ParkingState.indoorFree #] {
					//Generate TOKENID
					[#
						val sdf = java.text.SimpleDateFormat("dd/MM/yyyy-hh:mm:ss")
						val currentDate = sdf.format(java.util.Date())	
						val TOKENID_RAW = "$currentDate-$SLOTNUM"
						val TOKENID = TOKENID_RAW.filter{it.isDigit()}
					#]
					
					
					[#RESPONSE = "$TOKENID" #]
					replyTo carenter with responseCarenter : responseCarenter($RESPONSE)
					
					// Send the trolley to the INDOOR area
					request trolley_controller -m moveToIn : moveToIn(move)
					
					println("clientservice moves the car to SLOTNUM = $SLOTNUM")
					updateResource [# "parkingclientservice moves the car to SLOTNUM = $SLOTNUM" #]
					
						
					
					[# ParkingState.slotState.put(SLOTNUM, "$TOKENID") #]
						
					//Save state to file
					[#
						saveObject("ParkingState.json", ParkingState)
					#]
				}
				else {
					[# RESPONSE = "The indoor area is free" #]
					replyTo carenter with responseCarenter : responseCarenter($RESPONSE)
				}
			} else {
				[# RESPONSE = "Invalid parking slot number" #]
				replyTo carenter with responseCarenter : responseCarenter($RESPONSE)
			}
			
	        	println("clientservice reply")
	        	updateResource [# "clientservice reply" #]
			
		}
		
	}
	Transition t0 whenMsg trolleyError -> error
		      whenReply movedToSlot -> processReply
		      whenReply movedToIn -> processReply
		      whenMsg goToIdle -> idle
		     


	State error{
		println("Error in transportTrolley! Technical intervention required")
	}
	Transition t0 whenMsg restart -> idle

	State processReply{
		onMsg(movedToSlot: movedToSlot(done)){
			//check if in park in or park out
			[#if(currentJob == "parkOut"){
			  	#]request trolley_controller -m moveToOut : moveToOut(move)
			  [#}else{#]
				forward park_client_service -m goToIdle : goToIdle(go) [#}
			#]
		}
		
		onMsg(movedToIn : movedToIn(done)){
			
			request trolley_controller -m moveToSlot : moveToSlot($SLOTNUM)
			[#currentJob = "parkIn"
				ParkingState.indoorFree = true
				#
			]
		}

		onMsg(movedToOut : movedToOut(done)){
			forward park_client_service -m goToIdle : goToIdle(go)
			[#
				ParkingState.outdoorFree = false#
			]

		}
	}
	Transition t0 whenMsg goToIdle -> idle
		      whenReply movedToOut -> processReply
		       whenReply movedToSlot -> processReply
			
	
		
}




QActor trolley_controller context  ctxcarparking{
	[#
		var currentTask : String = "NONE"
		//var ps : resources.ParkingState()
		lateinit var mv : String
		var x = 0
		var y = 0
		lateinit var ttAd : resources.ActuatorPort
		val HOME : Pair<String,String> = Pair("0", "0")
		val INDOOR : Pair<String,String> = Pair("5", "0")
		val OUTDOOR : Pair<String,String> = Pair("5", "4")
		val SLOT1 : Pair<String,String> = Pair("1", "1")
		val SLOT2 : Pair<String,String> = Pair("1", "2")
		val SLOT3 : Pair<String,String> = Pair("1", "3")
		val SLOT4 : Pair<String,String> = Pair("4", "1")
		val SLOT5 : Pair<String,String> = Pair("4", "2")
		val SLOT6 : Pair<String,String> = Pair("4", "3")
		
	#]
		
	State s0 initial{
		[#ttAd = resources.ActuatorFactory().getActuatorAdapter(resources.ActuatorType.TROLLEY)#]
		println("trolleyController STARTS")
		run planner.plannerUtil.loadRoomMapFromTxt("parkingMap.txt") 
		run planner.plannerUtil.initAI()
		println("INITIAL MAP") 
 		run planner.plannerUtil.showMap() 
		run planner.plannerUtil.startTimer()
	}
	Goto idle
				  
	State idle{
		[# currentTask = "INDOOR" #]
		updateResource [# "trolley IDLE" #]
		println("trolleyController idle")
	}
	Transition t0 whenRequest moveToIn -> working
				  whenRequest moveToOut -> working
				  whenRequest moveToSlot -> working
				  whenMsg moveToHome -> working
				  whenMsg stop -> stopped 
	
	
	State working{
		[#resources.ParkingState.trolleyState = "trolley WORKING"#]
		printCurrentMessage
		println("trolley WORKING")
		updateResource [# "WORKING" #]
		
		//Move the trolley to the INDOOR area
		onMsg(moveToIn : moveToIn(WHERE)) {
				println("trolley trip to INDOOR start")
				[# 
					planner.plannerUtil.planForGoal(INDOOR.first,INDOOR.second) 
					currentTask = "INDOOR"
			
					var mv : String = planner.plannerUtil.getNextPlannedMove()
					while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						delay(1500)
						//CONTROLLARE STATO SE EVNTUALE ERRORE
						planner.plannerUtil.updateMap(mv)
						mv = planner.plannerUtil.getNextPlannedMove()	
				}#]
				println("trolley trip to INDOOR end")
				
				updateResource [# "(5,0)" #]
				replyTo moveToIn with movedToIn : movedToIn(done)
		}
		//Move the trolley to the OUTDOOR area
		onMsg(moveToOut : moveToOut(WHERE)) {
				
				println("trolley trip to OUTDOOR start")
				[# 
					planner.plannerUtil.planForGoal(OUTDOOR.first,OUTDOOR.second) 
					currentTask = "OUTDOOR"
			
					var mv : String = planner.plannerUtil.getNextPlannedMove()
					while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						delay(1500)
						//CONTROLLARE STATO SE EVNTUALE ERRORE
						planner.plannerUtil.updateMap(mv)
						mv = planner.plannerUtil.getNextPlannedMove()	
				}#]
				println("trolley trip to OUTDOOR end")
				updateResource [# "(5,4)" #]
				replyTo moveToOut with movedToOut : movedToOut(done)
				forward trolley_controller -m moveToHome : moveToHome(X)
		}
		//Move the trolley to the specific parking slot
		onMsg(moveToSlot : moveToSlot(SLOTNUM)) {
			[# 
				var SLOTNUM = payloadArg(0).toInt()
				if( currentTask.equals("INDOOR"))
					currentTask = "PARKIN"
				else
					currentTask = "PARKOUT"
			#]
			println("trolley trip to slot $SLOTNUM start")
			//updateResource [# "trolley moveToSlot($SLOTNUM)" #]
			
			[#
				when(SLOTNUM){
					1 -> {planner.plannerUtil.planForGoal(SLOT1.first, SLOT1.second);x=1;y=1}
					2 -> {planner.plannerUtil.planForGoal(SLOT2.first, SLOT2.second);x=1;y=2}
					3 -> {planner.plannerUtil.planForGoal(SLOT3.first, SLOT3.second);x=1;y=3}
					4 -> {planner.plannerUtil.planForGoal(SLOT4.first, SLOT4.second);x=4;y=1}
					5 -> {planner.plannerUtil.planForGoal(SLOT5.first, SLOT5.second);x=4;y=2}
					6 -> {planner.plannerUtil.planForGoal(SLOT6.first, SLOT6.second);x=4;y=3}
				}
				
				var mv = planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
						ttAd.sendCommand(mv)
						delay(1500)	
						//CONTROLLARE STATO SE EVNTUALE ERRORE					
						planner.plannerUtil.updateMap(mv)
						mv = planner.plannerUtil.getNextPlannedMove()		
				}#]
			
		 	updateResource [# "("+x+","+y+")" #] 
			println("trolley trip to slot $SLOTNUM end")
			println("trolley $currentTask")
			if [# currentTask.equals("PARKIN") #]{
				forward trolley_controller -m moveToHome : moveToHome(X)
			}
			replyTo moveToSlot with movedToSlot : movedToSlot(done)
		}
		
		
		//Move the trolley to the HOME position
		onMsg(moveToHome : moveToHome(HOME)) {
				[#
				currentTask = "HOME"
				planner.plannerUtil.planForGoal(HOME.first, HOME.second)
				var mv : String = planner.plannerUtil.getNextPlannedMove()
				while(! mv.equals("")){
						ttAd.sendCommand(mv) 
						delay(1500)
						//CONTROLLARE STATO SE EVNTUALE ERRORE
						planner.plannerUtil.updateMap(mv)
						mv = planner.plannerUtil.getNextPlannedMove()
				}#]
				println("trolley in HOME")
				updateResource [# "(0,0)" #]
		
		}
	}
	Transition t1  
			whenMsg error -> blocked
			whenMsg stop -> stopped
	     		whenMsg moveToHome -> working
			whenRequest moveToIn -> working
			whenRequest moveToOut -> working
		 	whenRequest moveToSlot -> working
			whenMsg goToIdle -> idle
		
	State blocked{
		println("trolleyController blocked")
		
		[#resources.ParkingState.trolleyState="trolley STOPPED"#]
	}
	
	State stopped{
		println("trolleyController stopped")
		[#resources.ParkingState.trolleyState = "trolley STOPPED"#]
	}
	Transition t2
		whenMsg resume and [# currentTask == "HOME" || currentTask == "IDLE" #]-> idle
		whenMsg resume and [# currentTask == "PARKIN" || currentTask == "PARKOUT" || currentTask == "OUTDOOR" || currentTask == "INDOOR"#] -> working
}


QActor fan context  ctxcarparking{
	[#var state : String = "OFF"
		#
	]
	State s0 initial{
		println("FAN STARTS")
	}
	Goto off
	
	State off{
		println("FAN OFF")
	}
	Transition t1
		whenMsg command -> checkCommand
		
	State checkCommand{
		onMsg(command : command(X)){
			[#
				if (payloadArg(0)=="ON"){
					state = "ON"
					#]
					updateResource [# "status ON" #]
					
					//replyTo command with executed : executed(ON)
					[# 
				}else{
					state = "OFF" 
				#]
				updateResource [# "status OFF" #]
					//replyTo command with executed : executed(OFF)
				[#
				}
				#]
				
				
		}
	}
	Goto off if [#state == "OFF"#] else on
	

	State on{
		println("FAN ON")
	}
	Transition t1
		whenMsg command -> checkCommand

		
}



 