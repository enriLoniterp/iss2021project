/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package pre.sprint

import org.junit.jupiter.api.BeforeEach
import org.eclipse.californium.core.CoapClient
import org.eclipse.californium.core.CoapResponse
import org.eclipse.californium.core.coap.MediaTypeRegistry
import kotlin.test.*
import it.unibo.kactor.ApplMessage
import it.unibo.kactor.MsgUtil


class AppTest {

    private val indoorUrl = "coap://localhost:8002/ctxcarparking/weightsensor"
    private val outdoorUrl = "coap://localhost:8002/ctxcarparking/outsonar"
    private val mainUrl = "coap://localhost:8002/ctxcarparking/parkingmanagerservice"
    private lateinit var weightClient: CoapClient
    private lateinit var sonarClient: CoapClient
    private lateinit var logicClient: CoapClient


   @BeforeEach fun basicComponents(){
       weightClient = CoapClient(indoorUrl)
       weightClient.timeout = 1000L
       sonarClient = CoapClient(outdoorUrl)
       sonarClient.timeout = 1000L
       logicClient = CoapClient(mainUrl)
       logicClient.timeout = 1000L
    }


    //SPIEGAZIONE
    //refresh weighSensor value with an high number, it means it is occupied by a car
    //client sends a new request to the businessLogic, the b.l. must refuse this request
    @Test fun IndoorOccupied() {
        val newWeight: Int = 450
        updateSensorValue(newWeight, "weightsensor", weightClient, {s -> s.split(",").get(0).substringAfterLast("(").toInt()})
        print("ok sensorvalue")
        //val exp = listOf("coap1", "reqenter", "reqenter(DamianodeiManeskin)", "parkingmanagerservice")
        //val richiesta = exp.joinToString(separator = ",")
        val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "reqenter", "reqenter(DamianodeiManeskin)", "parkingmanagerservice")
        val acceptInResponse: CoapResponse? = logicClient.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
        assertNull(acceptInResponse, "acceptIn request was not refused")
    }

    //SPIEGAZIONE
    //refresh outSonar sensor value with a number, it means it is occupied by a car
    //client sends a new request to the businessLogic, the b.l. must refuse this request and send a wait message
    @Test fun OutdoorOccupied() {
        val targa: String = "0A1"
        val newDistance: Int = 5 //metri
        updateSensorValue(newDistance, "outsonar", sonarClient, { s-> s.split(",").get(0).substringAfterLast("(").toInt()})
       // val exp = listOf("coap1", "pickup", "pickup($targa)", "parkingmanagerservice")
        //val richiesta = exp.joinToString(separator = ",")
        val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "pickup", "pickup($targa)", "parkingmanagerservice")
        val pickupResponse: CoapResponse? = logicClient.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
        assertNotNull(pickupResponse, "pickupreq ok")
        if (pickupResponse.isSuccess) {
            val resp: String = pickupResponse.responseText.split(",").get(4).substringAfter("(").substringBefore(")")
            assertEquals(resp, "wait", "Pickup request was accepted")
        } else {
            fail("pickup request was not correctly answered")
        }
    }

    //SPIEGAZIONE
    //send request to pickup car with a certain ID and receive request,
    //if the response is not null we check the number is equal to 1, then it is free
    @Test fun freeOutdoor() {
        val ID: String = goInThePark()
        //val exp = listOf("coap1", "pickup", "pickup($ID)", "parkingmanagerservice")
        //val richiesta = exp.joinToString(separator = ",")
        val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "pickup", "pickup(DamianodeiManeskin)", "parkingmanagerservice")
        val pickupResponse: CoapResponse? = logicClient.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
        assertNotNull(pickupResponse, "pickup req ref")
        pickupResponse.toString()
        if (pickupResponse.isSuccess) {
            val response: String = pickupResponse.responseText.split(",").get(4).substringAfter("(").substringBefore(")")
            assertEquals(response, "1", "pickup req is ok")
        } else {
            fail("pickup req has not responded with right code")
        }
    }

    @Test fun enterParking(){
        val ID:String = goInThePark()
        print("correctly inside with ID: $ID")
    }

    fun updateSensorValue(newV: Int, nomeSensore: String, client: CoapClient, responseToValue: (String) -> Int) {
        //val exp = listOf("coap1","updateValue", "updateValue($newV)", nomeSensore)
        //val richiesta = exp.joinToString(separator = ",")
        val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "updateValue", "updateValue($newV)", nomeSensore)
        val updateResponse: CoapResponse? = client.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
        val firstResponse: CoapResponse? = client.get(MediaTypeRegistry.TEXT_PLAIN)
        assertNotNull(firstResponse, "not ok")
        if (firstResponse.isSuccess) {
            val value: Int = responseToValue(firstResponse.responseText)
            assertEquals(newV, value, "correctly updated")
        } else {
            print("fail update")
            fail("Resource update failed")
        }
    }

    fun goInThePark(): String {
        val emptyWeight: Int = 0
        val carWeight: Int = 400
        updateSensorValue(emptyWeight, "weightsensor", weightClient, { s -> s.split(",").get(0).substringAfterLast("(").toInt()})
        //val exp = listOf("coap1", "reqenter", "reqenter(DamianodeiManeskin)", "parkingmanagerservice")
        //val richiesta = exp.joinToString(separator = ",")
        val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "reqenter", "reqenter(DamianodeiManeskin)", "parkingmanagerservice")
        val acceptInResponse: CoapResponse? = logicClient.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
        assertNotNull(acceptInResponse, "car doens't enter the indoorArea")
        if (acceptInResponse.isSuccess) {
            val slot: Int = acceptInResponse.responseText.split(",").get(4).substringAfter("(").substringBefore(")").toInt()
            assertTrue(slot > 0, "parking-slot was not free")
            assertTrue(slot < 7, "parking-slot was not free")
            updateSensorValue(carWeight, "weightsensor", weightClient, {s -> s.split(",").get(0).substringAfterLast("(").toInt()})
            //val expCarenter = listOf("coap1", "carenter", "carenter($slot)", "parkingmanagerservice")
            //val richiesta = expCarenter.joinToString(separator = ",")
            val richiesta: ApplMessage = MsgUtil.buildRequest("coap1", "carenter", "carenter($slot)", "parkingmanagerservice")
            val carenterResp: CoapResponse? = logicClient.put(richiesta.toString(), MediaTypeRegistry.TEXT_PLAIN)
            assertNotNull(carenterResp, "carenter request was refused")
            if (carenterResp.isSuccess) {
                val token: String = carenterResp.responseText.split(",").get(4).substringAfter("(").substringBefore(")")
                assertTrue(token.endsWith(slot.toString()), "Wrong token")
                return token
            } else {
                fail(" req id failed")
            }
        } else {
            fail("req failed")
        }
    }
}

