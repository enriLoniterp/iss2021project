/* Generated by AN DISI Unibo */ 
package it.unibo.datacollector

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Datacollector ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("datacollector STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("datacollector waiting ...")
					}
					 transition(edgeName="t024",targetState="handleWeight",cond=whenRequest("weight"))
					transition(edgeName="t025",targetState="handleDetect",cond=whenRequest("detect"))
					transition(edgeName="t026",targetState="handleWeightEvent",cond=whenEvent("weight_event"))
					transition(edgeName="t027",targetState="handleSonarEvent",cond=whenEvent("sonar_event"))
				}	 
				state("handleWeight") { //this:State
					action { //it:State
						println("datacollector reply with weight")
						answer("weight", "cur_weight", "cur_weight(0)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleDetect") { //this:State
					action { //it:State
						println("datacollector reply with detection")
						answer("detect", "detected", "detected(700)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleWeightEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("weight_event(LAST_WEIGHT,TIMESTAMP)"), Term.createTerm("weight_event(LAST_WEIGHT,TIMESTAMP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												WEIGHT = payloadArg(0 ).toInt()
												weight_timestamp = payloadArg(1).toLong()
												var weight_time = java.util.Date(weight_timestamp*1000) 
								println("datacollector saving new weight = $WEIGHT Kg | $weight_time")
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleSonarEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("sonar_event(LAST_DISTANCE,TIMESTAMP)"), Term.createTerm("sonar_event(LAST_DISTANCE,TIMESTAMP)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												DISTANCE = payloadArg(0).toInt()
												sonar_timestamp = payloadArg(1).toLong()
												var sonar_time = java.util.Date(sonar_timestamp*1000)
								println("datacollector saving new distance = $DISTANCE cm | $sonar_time")
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
