/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var c_weight = 9999 ; var COUNTER = 1500; var SLOTNUM = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingmanagerservice STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("parkingmanagerservice waiting ...")
					}
					 transition(edgeName="t03",targetState="handleEnterRequest",cond=whenRequest("reqenter"))
					transition(edgeName="t04",targetState="enterTheCar",cond=whenRequest("carenter"))
					transition(edgeName="t05",targetState="exitTheCar",cond=whenRequest("pickup"))
				}	 
				state("handleEnterRequest") { //this:State
					action { //it:State
						 var Tester = true  
						println("parkingmanagerservice handles reqenter and ask datacollctor")
						request("weight", "weight(now)" ,"datacollector" )  
					}
					 transition(edgeName="t06",targetState="checkWeight",cond=whenReply("cur_weight"))
				}	 
				state("checkWeight") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("parkingmanagerservice check weight")
						if( checkMsgContent( Term.createTerm("cur_weight(O)"), Term.createTerm("cur_weight(O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("parkingmanagerservice")
								 var c_weight = payloadArg(0).toInt()   
								if(  c_weight == 0  
								 ){answer("reqenter", "enter", "enter(5)"   )  
								println("parkingmanagerservice slot 5 free")
								forward("backToHome", "backToHome(go)" ,"trolley" ) 
								}
								else
								 {println("parkingmanagerservice INDOOR occupied")
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("enterTheCar") { //this:State
					action { //it:State
						println("parkingmanagerservice reply to enterthecar ")
						if( checkMsgContent( Term.createTerm("carenter(SLOTNUM)"), Term.createTerm("carenter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = payloadArg(0 ).toInt()   
								 var TOKENID = COUNTER - 5   
								answer("carenter", "receipt", "receipt($TOKENID)"   )  
						}
						println("parkingmanagerservice moves the car to SLOTNUM = $SLOTNUM ")
						forward("moveToIn", "moveToIn(go)" ,"trolley" ) 
						forward("moveToSlotIn", "moveToSlotIn(SLOTNUM)" ,"trolley" ) 
						forward("backToHome", "backToHome(go)" ,"trolley" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("exitTheCar") { //this:State
					action { //it:State
						 var Tester = true  
						println("parkingmanagerservice handles pickup ")
						if( checkMsgContent( Term.createTerm("pickup(TOKENID)"), Term.createTerm("pickup(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM = payloadArg(0 ).toInt()   
								request("detect", "detect(p)" ,"datacollector" )  
								println("parkingmanagerservice request detection ")
								if(  Tester   
								 ){}
								else
								 {answer("pickup", "confirm", "confirm(0)"   )  
								 println("parkingmanagerservice outdoor occupied")
								 }
						}
					}
					 transition(edgeName="t07",targetState="checkDetection",cond=whenReply("detected"))
				}	 
				state("checkDetection") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("detected(V)"), Term.createTerm("detected(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var det = payloadArg(0)   
								if(  det == "no"  
								 ){answer("pickup", "confirm", "confirm(ok)"   )  
								println("parkingmanagerservice moves the car to the exit")
								forward("moveToSlotOut", "moveToSlotOut($SLOTNUM)" ,"trolley" ) 
								forward("moveToOut", "moveToOut(ok)" ,"trolley" ) 
								forward("backToHome", "backToHome(go)" ,"trolley" ) 
								}
						}else{
							answer("pickup", "confirm", "confirm(no)"   )  
							println("parkingmanagerservice OUTDOOR occupied")
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
