/* Generated by AN DISI Unibo */ 
package it.unibo.trolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("trolley STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("trolley              | waiting .................. ")
					}
					 transition(edgeName="t031",targetState="tMoveToIn",cond=whenRequest("tMoveToIn"))
					transition(edgeName="t032",targetState="tMoveToSlotIn",cond=whenRequest("tMoveToSlotIn"))
					transition(edgeName="t033",targetState="tMoveToSlotOut",cond=whenRequest("tMoveToSlotOut"))
					transition(edgeName="t034",targetState="tMoveToOut",cond=whenRequest("tMoveToOut"))
					transition(edgeName="t035",targetState="tMoveToHome",cond=whenRequest("tBackToHome"))
				}	 
				state("tMoveToIn") { //this:State
					action { //it:State
						println("trolley              | moving to INDOOR ")
						delay(500) 
						println("trolley              | moved to INDOOR ")
						answer("tMoveToIn", "tMovedToIn", "tMovedToIn(succes)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tMoveToSlotIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tMoveToSlotIn(X,Y)"), Term.createTerm("tMoveToSlotIn(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var X = payloadArg(0).toInt() 
												var Y = payloadArg(1).toInt()
								println("trolley moving to coordinate ($X, $Y)")
								delay(500) 
								println("trolley moved to coordinate ($X, $Y)")
								answer("tMoveToIn", "tMovedToIn", "tMovedToIn(success)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tMoveToSlotOut") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("tMoveToSlotOut(X,Y)"), Term.createTerm("tMoveToSlotOut(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var X = payloadArg(0).toInt() 
												var Y = payloadArg(1).toInt()
								println("trolley moving to coordinate ($X, $Y)")
								delay(500) 
								println("trolley moved to coordinate ($X, $Y)")
								answer("tMoveToOut", "tMovedToOut", "tMovedToOut(success)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tMoveToOut") { //this:State
					action { //it:State
						println("trolley              | moving to OUTDOOR ")
						delay(500) 
						println("trolley              | moved to OUTDOOR ")
						answer("tMoveToOut", "tMovedToOut", "tMovedToOut(succes)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("tMoveToHome") { //this:State
					action { //it:State
						println("trolley              | moving to home ")
						delay(500) 
						println("trolley              | moved to home ")
						answer("tBackToHome", "tMovedToHome", "tMovedToHome(succes)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
