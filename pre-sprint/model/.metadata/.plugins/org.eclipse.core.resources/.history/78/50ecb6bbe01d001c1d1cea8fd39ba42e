/* Generated by AN DISI Unibo */ 
package it.unibo.datacollector

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Datacollector ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("datacollector STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("datacollector waiting ...")
					}
					 transition(edgeName="t023",targetState="handleWeight",cond=whenRequest("weight"))
					transition(edgeName="t024",targetState="handleDetect",cond=whenRequest("detect"))
				}	 
				state("handleWeight") { //this:State
					action { //it:State
						println("datacollector reply with weight")
						answer("weight", "cur_weight", "cur_weight(0)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("handleDetect") { //this:State
					action { //it:State
						println("datacollector reply with detection")
						answer("detect", "detected", "detected(700)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
