/* Generated by AN DISI Unibo */ 
package it.unibo.trolleycontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Trolleycontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var pb = true  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("trolleycontroller STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("trolleycontroller   | waiting .................. ")
					}
					 transition(edgeName="t013",targetState="moveTrolleyToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t014",targetState="moveTrolleyToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t015",targetState="moveTrolleyToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t016",targetState="moveTrolleyToOut",cond=whenRequest("moveToOut"))
					transition(edgeName="t017",targetState="moveTrolleyToHome",cond=whenRequest("backToHome"))
				}	 
				state("moveTrolleyToIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToIn(MOVETOIN)"), Term.createTerm("moveToIn(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("trolleycontroller   | move the Trolley to the INDOOR ")
								request("tMoveToIn", "tmoveToIn(move)" ,"trolley" )  
						}
					}
					 transition(edgeName="t018",targetState="checkTMovedToIn",cond=whenReply("tMovedToIn"))
				}	 
				state("checkTMovedToIn") { //this:State
					action { //it:State
						pb = true  
						if( checkMsgContent( Term.createTerm("tMovedToIn(SUCCESS)"), Term.createTerm("tMovedToIn(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var m =  payloadArg(0)  
								if(  m != problem  
								 ){println("trolleycontroller   | car picked up by the Trolley ")
								forward("secondW", "secondW(sW)" ,"weightsensor" ) 
								answer("moveToIn", "movedToIn", "movedToIn(moved)"   )  
								}
								else
								 {println("trolleycontroller   | car not picked up by the Trolley ")
								 answer("moveToIn", "movedToIn", "movedToIn(problem)"   )  
								 }
						}
					}
				}	 
				state("moveTrolleyToSlotIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToSlotIn(X,Y)"), Term.createTerm("moveToSlotIn(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("trolleycontroller   | move the Trolley(with the car) to the parking-slot in ($X,$Y) ")
								request("tMoveToSlotIn", "tMoveToSlotIn(X,Y)" ,"trolley" )  
						}
					}
					 transition(edgeName="t019",targetState="checkTMovedToSlotIn",cond=whenReply("tMovedToSlotIn"))
				}	 
				state("checkTMovedToSlotIn") { //this:State
					action { //it:State
						pb = true  
						if( checkMsgContent( Term.createTerm("tMovedToSlotIn(SUCCESS,X,Y)"), Term.createTerm("tMovedToSlotIn(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var m =  payloadArg(0)  
								if(  m != problem  
								 ){println("trolleycontroller   | car parked")
								answer("moveToSlotIn", "movedToSlotIn", "movedToSlotIn(moved)"   )  
								}
								else
								 {println("trolleycontroller   | car not parked")
								 answer("moveToSlotIn", "movedToSlotIn", "movedToSLotIn(problem)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToSlotOut") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToSlotOut(X,Y)"), Term.createTerm("moveToSlotOut(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("trolleycontroller   | move the Trolley to the parking-slot in ($X,$Y) ")
								request("tMoveToSlotOut", "tMoveToSlotOut(X,Y)" ,"trolley" )  
						}
					}
					 transition(edgeName="t020",targetState="checkTMovedToSlotOut",cond=whenReply("tMovedToSlotOut"))
				}	 
				state("checkTMovedToSlotOut") { //this:State
					action { //it:State
						pb = true  
						if( checkMsgContent( Term.createTerm("tMovedToSlotOut(SUCCESS,X,Y)"), Term.createTerm("tMovedToSlotOut(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var m =  payloadArg(0)  
								if(  m != problem  
								 ){println("trolleycontroller   | trolley moved to slot out")
								answer("moveToSlotOut", "movedToSlotOut", "movedToSlotOut(moved)"   )  
								}
								else
								 {println("trolleycontroller   | trolley not moved to slot out")
								 answer("moveToSlotOut", "movedToSlotOut", "movedToSLotOut(problem)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToOut") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToOut(X,Y)"), Term.createTerm("moveToOut(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("trolleycontroller   | move the Trolley to out")
								request("tMoveToOut", "tMoveToOut(X,Y)" ,"trolley" )  
						}
					}
					 transition(edgeName="t021",targetState="checkTMovedToOut",cond=whenReply("tMovedToOut"))
				}	 
				state("checkTMovedToOut") { //this:State
					action { //it:State
						pb = true  
						if( checkMsgContent( Term.createTerm("tMovedToOut(SUCCESS,X,Y)"), Term.createTerm("tMovedToOut(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var m =  payloadArg(0)  
								if(  m != problem  
								 ){println("trolleycontroller   | trolley with car moved to out")
								forward("firstOS", "firstOS(fOS)" ,"outsonar" ) 
								answer("moveToOut", "movedToOut", "movedToOut(moved)"   )  
								}
								else
								 {println("trolleycontroller   | trolley not moved to out")
								 answer("moveToOut", "movedToOut", "movedToOut(problem)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToHome") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("backToHome(X)"), Term.createTerm("backToHome(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("trolleycontroller   | move the Trolley to home")
								request("tBackToHome", "tBackToHome(X,Y)" ,"trolley" )  
						}
					}
					 transition(edgeName="t022",targetState="checkTMovedToHome",cond=whenReply("tMovedToHome"))
				}	 
				state("checkTMovedToHome") { //this:State
					action { //it:State
						pb = true  
						if( checkMsgContent( Term.createTerm("tMovedToHome(Y)"), Term.createTerm("tMovedToHome(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var m =  payloadArg(0)  
								if(  m != problem  
								 ){println("trolleycontroller   | trolley moved to home")
								answer("backToHome", "movedToHome", "movedToHome(moved)"   )  
								}
								else
								 {println("trolleycontroller   | trolley not moved to home")
								 answer("backToHome", "movedToHome", "movedToHome(problem)"   )  
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
