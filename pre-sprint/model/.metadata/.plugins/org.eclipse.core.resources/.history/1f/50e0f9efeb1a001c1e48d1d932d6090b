/* Generated by AN DISI Unibo */ 
package it.unibo.parkingmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var c_weight = 9999 ; var COUNTER = 1500; var SLOTNUM = 0; var pb = true; var outdoorfree = false; var TOKENID = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingmanagerservice STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("parkingmanagerservice waiting ...")
					}
					 transition(edgeName="t03",targetState="handleEnterRequest",cond=whenRequest("reqenter"))
					transition(edgeName="t04",targetState="enterTheCar",cond=whenRequest("carenter"))
					transition(edgeName="t05",targetState="exitTheCar",cond=whenRequest("pickup"))
				}	 
				state("handleEnterRequest") { //this:State
					action { //it:State
						 var Tester = true  
						println("parkingmanagerservice handles reqenter and ask datacollctor")
						request("weight", "weight(now)" ,"datacollector" )  
					}
					 transition(edgeName="t06",targetState="checkWeight",cond=whenReply("cur_weight"))
				}	 
				state("checkWeight") { //this:State
					action { //it:State
						println("parkingmanagerservice check weight")
						if( checkMsgContent( Term.createTerm("cur_weight(O)"), Term.createTerm("cur_weight(O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 c_weight = payloadArg(0).toInt()   
								if(  c_weight == 0  
								 ){answer("reqenter", "enter", "enter(5)"   )  
								println("parkingmanagerservice slot 5 free")
								}
								else
								 {println("parkingmanagerservice INDOOR occupied")
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ c_weight != 0  
					}) )
					transition( edgeName="goto",targetState="moveTrolleyHome", cond=doswitchGuarded({! ( c_weight != 0  
					) }) )
				}	 
				state("moveTrolleyHome") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move at home")
						request("backToHome", "backToHome(go)" ,"trolleycontroller" )  
					}
					 transition(edgeName="t07",targetState="checkMove",cond=whenReply("movedToHome"))
				}	 
				state("checkMove") { //this:State
					action { //it:State
						
									var m = ""  
						println("parkingmanagerservice check move")
						if( checkMsgContent( Term.createTerm("movedToHome(Y)"), Term.createTerm("movedToHome(Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){if(  m == "already"  
								 ){println("parkingmanagerservice: trolley already at home")
								}
								else
								 {println("parkingmanagerservice: trolley moved")
								 }
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("trolleyProblem") { //this:State
					action { //it:State
						println("parkingmanagerservice: problem with the trolley. maintenance required")
					}
				}	 
				state("enterTheCar") { //this:State
					action { //it:State
						println("parkingmanagerservice reply to enterthecar ")
						if( checkMsgContent( Term.createTerm("carenter(SLOT)"), Term.createTerm("carenter(SLOT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0 ).toInt()   
								 var TOKENID = COUNTER - 5   
								answer("carenter", "receipt", "receipt($TOKENID)"   )  
						}
						println("parkingmanagerservice moves the car to SLOTNUM = $SLOTNUM ")
						request("moveToIn", "moveToIn(go)" ,"trolleycontroller" )  
					}
					 transition(edgeName="t08",targetState="checkMovedToIn",cond=whenReply("movedToIn"))
				}	 
				state("checkMovedToIn") { //this:State
					action { //it:State
						 pb = true
									var m= ""  
						if( checkMsgContent( Term.createTerm("movedToIn(SUCCESS)"), Term.createTerm("movedToIn(SUCCESS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyToSlotIn", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("moveTrolleyToSlotIn") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move to slot in")
						request("moveToSlotIn", "moveToSlotIn(3,2)" ,"trolleycontroller" )  
					}
					 transition(edgeName="t09",targetState="checkMovedToSlotIn",cond=whenReply("movedToSlotIn"))
				}	 
				state("checkMovedToSlotIn") { //this:State
					action { //it:State
						 var pb = true
									var m = ""  
						if( checkMsgContent( Term.createTerm("movedToSlotIn(SUCCESS,X,Y)"), Term.createTerm("movedToIn(SUCCESS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyHome", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("exitTheCar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup(TOKENID)"), Term.createTerm("pickup(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var TOKENID = payloadArg(0).toString() 
												SLOTNUM = 1 //TODO: deduce SLOTNUM from TOKENID 
						}
						request("detect", "detect(V)" ,"datacollector" )  
						println("businesslogic         | checking the OUTDOOR-area")
					}
					 transition(edgeName="t010",targetState="handlePickUpRequest",cond=whenReply("detected"))
				}	 
				state("handlePickUpRequest") { //this:State
					action { //it:State
						 outdoorfree = false  
						if( checkMsgContent( Term.createTerm("detected(V)"), Term.createTerm("detected(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var distance = payloadArg(0).toInt() 
												  
												if(distance >= 0 && distance <= 500){
													outdoorfree = false  
												}
												else{
													outdoorfree = true
												}
								println("businesslogic         | last distance received = $distance cm")
						}
						if(  outdoorfree  
						 ){ 
										var OK = "ok"
										var X = 2 //todo: deduce the cell from SLOTNUM
										var Y = 1
						println("businesslogic         | reply to pickup ")
						println("businesslogic         | sends the instructions to the actuatorscontroller to manage the car pickup (TOKENID = $TOKENID) at the parking-slot = $SLOTNUM ")
						println("businesslogic         | request to moveToSlotOut($X,$Y)")
						}
						else
						 { var OK = "wait"  
						 answer("pickup", "confirm", "confirm($OK)"   )  
						 }
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({ outdoorfree == false  
					}) )
					transition( edgeName="goto",targetState="moveTrolleyToSlotOut", cond=doswitchGuarded({! ( outdoorfree == false  
					) }) )
				}	 
				state("moveTrolleyToSlotOut") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move to slot out")
						request("moveToSlotOut", "moveToSlotOut(3,2)" ,"trolleycontroller" )  
					}
					 transition(edgeName="t011",targetState="checkMovedToSlotOut",cond=whenReply("movedToSlotOut"))
				}	 
				state("checkMovedToSlotOut") { //this:State
					action { //it:State
						 pb = true 
									var m = ""  
						if( checkMsgContent( Term.createTerm("movedToSlotOut(SUCCESS,X,Y)"), Term.createTerm("movedToSlotOut(SUCCESS,X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyToOut", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
				state("moveTrolleyToOut") { //this:State
					action { //it:State
						println("parkingmanagerservice request the trolley to move to out")
						request("moveToOut", "moveToOut(3,2)" ,"trolleycontroller" )  
					}
					 transition(edgeName="t012",targetState="checkMovedToOut",cond=whenReply("movedToOut"))
				}	 
				state("checkMovedToOut") { //this:State
					action { //it:State
						 pb = true 
									var m = ""  
						println("parkingmanagerservice: qui")
						if( checkMsgContent( Term.createTerm("movedToOut(SUCCESS,X,Y)"), Term.createTerm("movedToOut(SUCCESS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 m = payloadArg(0)   
								if(  m != "problem"  
								 ){println("parkingmanagerservice: trolley moved")
								answer("pickup", "confirm", "confirm(ok)"   )  
								 pb = false  
								}
						}
					}
					 transition( edgeName="goto",targetState="moveTrolleyHome", cond=doswitchGuarded({ pb == false  
					}) )
					transition( edgeName="goto",targetState="trolleyProblem", cond=doswitchGuarded({! ( pb == false  
					) }) )
				}	 
			}
		}
}
