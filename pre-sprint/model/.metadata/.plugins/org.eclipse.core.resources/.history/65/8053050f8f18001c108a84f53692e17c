/* Generated by AN DISI Unibo */ 
package it.unibo.actuatorscontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Actuatorscontroller ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("actuatorscontroller STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("actuatorscontroller   | waiting .................. ")
					}
					 transition(edgeName="t013",targetState="moveTrolleyToIn",cond=whenRequest("moveToIn"))
					transition(edgeName="t014",targetState="moveTrolleyToSlotIn",cond=whenRequest("moveToSlotIn"))
					transition(edgeName="t015",targetState="moveTrolleyToSlotOut",cond=whenRequest("moveToSlotOut"))
					transition(edgeName="t016",targetState="moveTrolleyToOut",cond=whenRequest("moveToOut"))
					transition(edgeName="t017",targetState="moveTrolleyToHome",cond=whenRequest("backToHome"))
				}	 
				state("moveTrolleyToIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToIn(MOVETOIN)"), Term.createTerm("moveToIn(MTOIN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("actuatorscontroller   | move the Trolley to the INDOOR ")
								println("actuatorscontroller   | car picked up by the Trolley ")
								forward("secondW", "secondW(sW)" ,"weightsensor" ) 
								answer("moveToIn", "movedToIn", "movedToIn(true,6,0)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToSlotIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToSlotIn(X,Y)"), Term.createTerm("moveToSlotIn(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("actuatorscontroller   | move the Trolley(with the car) next to the parking-slot in ($X,$Y) ")
								println("actuatorscontroller   | car parked in ($X,$Y)")
								  Y = 0  
								answer("moveToSlotIn", "movedToSlotIn", "movedToSlotIn(true,$X,$Y)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToSlotOut") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveToSlotOut(X,Y)"), Term.createTerm("moveToSlotOut(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								println("actuatorscontroller   | move the Trolley next to the parking-slot in ($X,$Y) ")
								println("actuatorscontroller   | car picked up in ($X,$Y)")
								  Y = 0  
								answer("moveToSlotOut", "movedToSlotOut", "movedToSlotOut(true,$X,$Y)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToOut") { //this:State
					action { //it:State
						println("actuatorscontroller   | move the Trolley(with the car) to the OUTDOOR ")
						println("actuatorscontroller   | Trolley leaves the car in the OUTDOOR-area ")
						forward("firstOS", "firstOS(fOS)" ,"outsonar" ) 
						answer("moveToOut", "movedToOut", "movedToOut(true,6,4)"   )  
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("moveTrolleyToHome") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("backToHome(X)"), Term.createTerm("backToHome(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var X = payloadArg(0).toInt()
												var Y = payloadArg(1).toInt()
								if(  X == 0 && Y == 0  
								 ){println("actuatorscontroller   | Trolley is already in the HOME position")
								}
								else
								 {println("actuatorscontroller   | move the Trolley in the HOME position - (0,0)")
								 }
								answer("backToHome", "movedToHome", "movedToHome(true,0,0)"   )  
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
