/* Generated by AN DISI Unibo */ 
package it.unibo.parkingservicegui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingservicegui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var SLOTNUM = 0; var OK = ""; var TOKENID = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingservicegui (client mock)  STARTS")
					}
					 transition( edgeName="goto",targetState="requestToEnter", cond=doswitch() )
				}	 
				state("requestToEnter") { //this:State
					action { //it:State
						println("client requestToEnter")
						request("reqenter", "reqenter(alex)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t00",targetState="enterTheCar",cond=whenReply("enter"))
				}	 
				state("enterTheCar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("enter(SLOTNUM)"), Term.createTerm("enter(SLOTNUM)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = payloadArg(0 ).toInt()  
								println("client receives SLOTNUM = $SLOTNUM ")
						}
					}
					 transition( edgeName="goto",targetState="retrayLater", cond=doswitchGuarded({ SLOTNUM==0  
					}) )
					transition( edgeName="goto",targetState="moveTheCarToIndoor", cond=doswitchGuarded({! ( SLOTNUM==0  
					) }) )
				}	 
				state("moveTheCarToIndoor") { //this:State
					action { //it:State
						println("client moving the car in the INDOOR and press CARENTER ")
						forward("carP", "carP(r)" ,"weightsensor" ) 
						request("carenter", "carenter($SLOTNUM)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t01",targetState="afterReceipt",cond=whenReply("receipt"))
				}	 
				state("afterReceipt") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("receipt(TOKENID)"), Term.createTerm("receipt(TOKEID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 TOKENID = payloadArg(0 ).toInt()  
								println("client receives TOKENID = $TOKENID")
						}
						delay(5000) 
						println("client moving to OUTDOOR ")
						delay(5000) 
					}
					 transition( edgeName="goto",targetState="takeCar", cond=doswitch() )
				}	 
				state("takeCar") { //this:State
					action { //it:State
						println("client requests car")
						request("pickup", "pickup($SLOTNUM)" ,"parkingmanagerservice" )  
					}
					 transition(edgeName="t02",targetState="afterConfirm",cond=whenReply("confirm"))
				}	 
				state("afterConfirm") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("confirm(Y)"), Term.createTerm("confirm(OK)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 OK = payloadArg(0 )  
								if(  OK == "ok"  
								 ){println("client wait the car at the outdoor")
								}
								else
								 {println("client: problem with the pickup")
								 }
						}
					}
					 transition(edgeName="t03",targetState="carReady",cond=whenDispatch("ready"))
				}	 
				state("carReady") { //this:State
					action { //it:State
						println("client go away with the car")
						forward("carND", "carND(sOs)" ,"outsonar" ) 
					}
				}	 
				state("retrayLater") { //this:State
					action { //it:State
						println("client will retry later")
					}
				}	 
			}
		}
}
