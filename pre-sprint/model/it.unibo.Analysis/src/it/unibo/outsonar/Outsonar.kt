/* Generated by AN DISI Unibo */ 
package it.unibo.outsonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outsonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("outsonar STARTS")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("outsonar waiting ...........")
					}
					 transition(edgeName="t132",targetState="firstUpdate",cond=whenDispatch("carD"))
					transition(edgeName="t133",targetState="secondUpdate",cond=whenDispatch("carND"))
					transition(edgeName="t134",targetState="update",cond=whenDispatch("updateValue"))
				}	 
				state("update") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("updateValue(V)"), Term.createTerm("updateValue(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var LAST_DISTANCE = payloadArg(0).toInt()	
												var TIMESTAMP = java.time.Instant.now().getEpochSecond()
								emit("sonar_event", "sonar_event($LAST_DISTANCE,$TIMESTAMP)" ) 
								updateResourceRep( "event( sonar_event($LAST_DISTANCE,$TIMESTAMP) )"  
								)
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("firstUpdate") { //this:State
					action { //it:State
						
									var LAST_DISTANCE = 100
						    		var TIMESTAMP = java.time.Instant.now().getEpochSecond();
						    		var TIMESTAMPFORMAT = java.util.Date(TIMESTAMP*1000);
						println("outsonar: sonar_event($LAST_DISTANCE,$TIMESTAMP,$TIMESTAMPFORMAT)")
						emit("sonar_event", "sonar_event($LAST_DISTANCE,$TIMESTAMP)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("secondUpdate") { //this:State
					action { //it:State
						
									var LAST_DISTANCE = 1000
						    		var TIMESTAMP = java.time.Instant.now().getEpochSecond();
						    		var TIMESTAMPFORMAT = java.util.Date(TIMESTAMP*1000);
						println("outsonar: sonar_event($LAST_DISTANCE,$TIMESTAMP,$TIMESTAMPFORMAT)")
						emit("sonar_event", "sonar_event($LAST_DISTANCE,$TIMESTAMP)" ) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
